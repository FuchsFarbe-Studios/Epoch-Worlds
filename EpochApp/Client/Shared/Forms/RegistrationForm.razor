@using EpochApp.Client.Services
@namespace EpochApp.Client.Shared
<EditForm Model="@_registration" OnSubmit="async ctx => AttemptRegistrationAsync(ctx)">
	<DataAnnotationsValidator />

	<FlatTextField @bind-Value="_registration.UserName" InputMode="InputType.Text" Floating="true" Id="@(nameof(_registration.UserName))" MaxLength="64" Label="Username" Placeholder="Login name" />
	<FlatTextField @bind-Value="_registration.Password" InputMode="InputType.Password" Floating="true" Id="@(nameof(_registration.Password))" MaxLength="64" Label="Password" Placeholder="Password" />
	<FlatTextField @bind-Value="_registration.Password2" InputMode="InputType.Password" Floating="true" Id="@(nameof(_registration.Password2))" MaxLength="64" Label="Confirm Password" Placeholder="Confirm Password" />
	<FlatBreak Color="FlatColor.Accent" BreakType="BreakType.Short" />
	<FlatButton Color="FlatColor.Accent" Type="ButtonType.Submit">Register!</FlatButton>
	<FlatTypo>Already have an account? <FlatLink >Log in!</FlatLink></FlatTypo>

</EditForm>

@code {
	private RegistrationDTO _registration = new RegistrationDTO();

	[Inject] public ILogger<RegistrationForm> Logger { get; set; }
	[Inject] public NavigationManager Nav { get; set; }
	[Inject] public EpochAuthProvider Auth { get; set; }
	[Inject] public HttpClient Client { get; set; }

	private async Task AttemptRegistrationAsync(EditContext ctx)
	{
		var result = await Client.PostAsJsonAsync("api/v1/EpochUsers/Registration", _registration);
		if (result.IsSuccessStatusCode)
		{
			await Auth.LoginAsync(_registration.UserName, _registration.Password);
			Nav.NavigateTo("/");
		}
		else
		{
			var errors = await result.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
			foreach (var error in errors)
			{
				Logger.LogError($"Error registering user: {error.Key}\n\t", error.Value, "\n");
			}
		}
	}
}