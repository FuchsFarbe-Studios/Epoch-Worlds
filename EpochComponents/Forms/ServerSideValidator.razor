@code {

	[CascadingParameter] public EditContext Context { get; set; }
	private ValidationMessageStore _store;

	#region Overrides of ComponentBase

	/// <inheritdoc />
	protected override void OnInitialized()
	{
		if (Context == null)
		{
			throw new InvalidOperationException($"{nameof(ServerSideValidator)} requires a cascading " +
			                                    $"parameter of type {nameof(EditContext)}. For example, you can use {nameof(ServerSideValidator)} " +
			                                    $"inside an {nameof(EditForm)}.");
		}
		_store = new ValidationMessageStore(Context);
		Context.OnValidationRequested += (s, e) => _store.Clear();
		Context.OnFieldChanged += (s, e) => _store.Clear(e.FieldIdentifier);
	}

	#endregion

	public void DisplayErrors(Dictionary<string, List<string>> errors)
	{
		if (Context is not null)
		{
			foreach (KeyValuePair<string,List<string>> err in errors)
				_store.Add(Context.Field(err.Key), err.Value);
			Context.NotifyValidationStateChanged();
		}
	}

	public void ClearErrors()
	{
		_store?.Clear();
		Context?.NotifyValidationStateChanged();
	}

}