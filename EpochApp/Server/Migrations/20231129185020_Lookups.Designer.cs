// <auto-generated />
using System;
using EntityFrameworkCore.Jet.Metadata;
using EpochApp.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EpochApp.Server.Migrations
{
    [DbContext(typeof(EpochDataDbContext))]
    [Migration("20231129185020_Lookups")]
    partial class Lookups
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Users")
                .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EpochApp.Server.Controllers.Phoneme", b =>
                {
                    b.Property<string>("PhonemeID")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("AudioFile")
                        .HasMaxLength(155)
                        .HasColumnType("varchar(155)");

                    b.HasKey("PhonemeID");

                    b.ToTable("lkPhonemes", "Lookups");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longchar");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longchar");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longchar");

                    b.HasKey("BlogID");

                    b.HasIndex("BlogTypeID");

                    b.ToTable("Blogs", "Blogs");
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.BlogOwner", b =>
                {
                    b.Property<int>("BlogID")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RemovedOn")
                        .HasColumnType("datetime");

                    b.HasKey("BlogID", "OwnerID");

                    b.HasIndex("OwnerID");

                    b.ToTable("BlogOwners", "Blogs");
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.BlogPost", b =>
                {
                    b.Property<int>("BlogID")
                        .HasColumnType("integer");

                    b.Property<Guid>("PostID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime");

                    b.HasKey("BlogID", "PostID");

                    b.HasIndex("PostID");

                    b.ToTable("BlogPosts", "Blogs");
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.BlogType", b =>
                {
                    b.Property<int>("BlogTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("longchar");

                    b.HasKey("BlogTypeID");

                    b.ToTable("lkBlogTypes", "Blogs");

                    b.HasData(
                        new
                        {
                            BlogTypeID = 1,
                            Description = "NEWS"
                        },
                        new
                        {
                            BlogTypeID = 2,
                            Description = "UPDATES"
                        },
                        new
                        {
                            BlogTypeID = 3,
                            Description = "EVENTS"
                        },
                        new
                        {
                            BlogTypeID = 4,
                            Description = "FAQ"
                        },
                        new
                        {
                            BlogTypeID = 5,
                            Description = "DOCUMENTATION"
                        });
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.Post", b =>
                {
                    b.Property<Guid>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("longchar");

                    b.Property<string>("Href")
                        .HasColumnType("longchar");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longchar");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("OutsideLink")
                        .HasColumnType("longchar");

                    b.Property<int>("PostTypeID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnType("longchar");

                    b.HasKey("PostID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("PostTypeID");

                    b.ToTable("Posts", "Blogs");
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.PostType", b =>
                {
                    b.Property<int>("PostTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("longchar");

                    b.HasKey("PostTypeID");

                    b.ToTable("lkPostTypes", "Blogs");
                });

            modelBuilder.Entity("EpochApp.Shared.Config.MetaTemplate", b =>
                {
                    b.Property<int>("TemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HelpText")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("TemplateID");

                    b.HasIndex("CategoryID");

                    b.ToTable("lkMetaTemplates", "Lookups");
                });

            modelBuilder.Entity("EpochApp.Shared.Lookups.ArticleCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Description");

                    b.HasKey("CategoryID");

                    b.ToTable("lkArticleCategories", "Lookups");
                });

            modelBuilder.Entity("EpochApp.Shared.Lookups.MetaCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Description");

                    b.HasKey("CategoryID");

                    b.ToTable("lkMetaCategories", "Lookups");
                });

            modelBuilder.Entity("EpochApp.Shared.Lookups.SocialMedia", b =>
                {
                    b.Property<int>("SocialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SocialMediaName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Description");

                    b.Property<string>("URLAffix")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SocialID");

                    b.ToTable("lkSocialMediae", "Lookups");
                });

            modelBuilder.Entity("EpochApp.Shared.Users.Profile", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarImg")
                        .HasColumnType("longchar");

                    b.Property<string>("Bio")
                        .HasColumnType("longchar");

                    b.Property<string>("CoverImg")
                        .HasColumnType("longchar");

                    b.Property<string>("FirstName")
                        .HasColumnType("longchar");

                    b.Property<string>("LastName")
                        .HasColumnType("longchar");

                    b.Property<string>("Signature")
                        .HasColumnType("longchar");

                    b.Property<string>("WebAddress")
                        .HasColumnType("longchar");

                    b.HasKey("UserID");

                    b.ToTable("Profiles", "Users");
                });

            modelBuilder.Entity("EpochApp.Shared.Users.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("longchar");

                    b.HasKey("RoleID");

                    b.ToTable("Roles", "Users");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Description = "DEFAULT"
                        },
                        new
                        {
                            RoleID = 2,
                            Description = "ACTIVATED"
                        },
                        new
                        {
                            RoleID = 3,
                            Description = "MODERATOR"
                        },
                        new
                        {
                            RoleID = 4,
                            Description = "ADMIN"
                        });
                });

            modelBuilder.Entity("EpochApp.Shared.Users.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateRemoved")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("longchar");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longchar");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longbinary");

                    b.Property<string>("UserName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("UserID");

                    b.ToTable("Users", "Users");
                });

            modelBuilder.Entity("EpochApp.Shared.Users.UserRole", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateRemoved")
                        .HasColumnType("datetime");

                    b.HasKey("RoleID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRoles", "Users");
                });

            modelBuilder.Entity("EpochApp.Shared.Users.UserSocial", b =>
                {
                    b.Property<int>("SocialID")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SocialHandle")
                        .HasColumnType("longchar");

                    b.HasKey("SocialID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserSocials", "Users");
                });

            modelBuilder.Entity("EpochApp.Shared.Worlds.World", b =>
                {
                    b.Property<Guid>("WorldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateRemoved")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longchar");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pronunciation")
                        .HasColumnType("longchar");

                    b.Property<string>("WorldName")
                        .HasColumnType("longchar");

                    b.HasKey("WorldID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Worlds", "Users");
                });

            modelBuilder.Entity("EpochApp.Shared.Worlds.WorldMeta", b =>
                {
                    b.Property<Guid>("WorldID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MetaID")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("longchar");

                    b.HasKey("WorldID", "MetaID");

                    b.HasIndex("MetaID");

                    b.ToTable("WorldMetas", "Users");
                });

            modelBuilder.Entity("EpochApp.Server.Controllers.Consonant", b =>
                {
                    b.HasBaseType("EpochApp.Server.Controllers.Phoneme");

                    b.Property<bool>("IsVoiced")
                        .HasColumnType("smallint");

                    b.Property<string>("Manner")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("Place")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.ToTable("lkConsonants", "Lookups");
                });

            modelBuilder.Entity("EpochApp.Server.Controllers.Vowel", b =>
                {
                    b.HasBaseType("EpochApp.Server.Controllers.Phoneme");

                    b.Property<string>("Depth")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<bool>("IsRounded")
                        .HasColumnType("smallint");

                    b.Property<string>("Verticality")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.ToTable("lkVowels", "Lookups");
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.Blog", b =>
                {
                    b.HasOne("EpochApp.Shared.Blog.BlogType", "BlogType")
                        .WithMany()
                        .HasForeignKey("BlogTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Blogs_BlogTypes");

                    b.Navigation("BlogType");
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.BlogOwner", b =>
                {
                    b.HasOne("EpochApp.Shared.Blog.Blog", "Blog")
                        .WithMany("BlogOwners")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BlogOwners_Blogs");

                    b.HasOne("EpochApp.Shared.Users.User", "Owner")
                        .WithMany("OwnedBlogs")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BlogOwners_Users");

                    b.Navigation("Blog");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.BlogPost", b =>
                {
                    b.HasOne("EpochApp.Shared.Blog.Blog", "Blog")
                        .WithMany("BlogPosts")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BlogPosts_Blogs");

                    b.HasOne("EpochApp.Shared.Blog.Post", "Post")
                        .WithMany("BlogPosts")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BlogPosts_Posts");

                    b.Navigation("Blog");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.Post", b =>
                {
                    b.HasOne("EpochApp.Shared.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID");

                    b.HasOne("EpochApp.Shared.Blog.PostType", "PostType")
                        .WithMany()
                        .HasForeignKey("PostTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("PostType");
                });

            modelBuilder.Entity("EpochApp.Shared.Config.MetaTemplate", b =>
                {
                    b.HasOne("EpochApp.Shared.Lookups.MetaCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MetaTemplates_MetaCategories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EpochApp.Shared.Users.Profile", b =>
                {
                    b.HasOne("EpochApp.Shared.Users.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("EpochApp.Shared.Users.Profile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Profile_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EpochApp.Shared.Users.UserRole", b =>
                {
                    b.HasOne("EpochApp.Shared.Users.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Roles");

                    b.HasOne("EpochApp.Shared.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Users");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EpochApp.Shared.Users.UserSocial", b =>
                {
                    b.HasOne("EpochApp.Shared.Lookups.SocialMedia", "Social")
                        .WithMany()
                        .HasForeignKey("SocialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserSocials_SocialMediae");

                    b.HasOne("EpochApp.Shared.Users.Profile", "Profile")
                        .WithMany("Socials")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserSocials_Users");

                    b.Navigation("Profile");

                    b.Navigation("Social");
                });

            modelBuilder.Entity("EpochApp.Shared.Worlds.World", b =>
                {
                    b.HasOne("EpochApp.Shared.Users.User", "Owner")
                        .WithMany("OwnedWorlds")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EpochApp.Shared.Worlds.WorldMeta", b =>
                {
                    b.HasOne("EpochApp.Shared.Config.MetaTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("MetaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EpochApp.Shared.Worlds.World", "World")
                        .WithMany("MetaData")
                        .HasForeignKey("WorldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("World");
                });

            modelBuilder.Entity("EpochApp.Server.Controllers.Consonant", b =>
                {
                    b.HasOne("EpochApp.Server.Controllers.Phoneme", null)
                        .WithOne()
                        .HasForeignKey("EpochApp.Server.Controllers.Consonant", "PhonemeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EpochApp.Server.Controllers.Vowel", b =>
                {
                    b.HasOne("EpochApp.Server.Controllers.Phoneme", null)
                        .WithOne()
                        .HasForeignKey("EpochApp.Server.Controllers.Vowel", "PhonemeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.Blog", b =>
                {
                    b.Navigation("BlogOwners");

                    b.Navigation("BlogPosts");
                });

            modelBuilder.Entity("EpochApp.Shared.Blog.Post", b =>
                {
                    b.Navigation("BlogPosts");
                });

            modelBuilder.Entity("EpochApp.Shared.Users.Profile", b =>
                {
                    b.Navigation("Socials");
                });

            modelBuilder.Entity("EpochApp.Shared.Users.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EpochApp.Shared.Users.User", b =>
                {
                    b.Navigation("OwnedBlogs");

                    b.Navigation("OwnedWorlds");

                    b.Navigation("Profile");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EpochApp.Shared.Worlds.World", b =>
                {
                    b.Navigation("MetaData");
                });
#pragma warning restore 612, 618
        }
    }
}
