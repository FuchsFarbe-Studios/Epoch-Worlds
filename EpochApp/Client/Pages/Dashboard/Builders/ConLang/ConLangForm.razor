@inherits BuilderFormBase<ConstructedLanguage, ConstructedLanguageResult>
@namespace EpochApp.Client.Pages.Dashboard.Builders

@if (ContentModel != null)
{
	<EditForm Model="@ContentModel" OnSubmit="@(async () => { if (!IsEditMode) { await SaveNewBuilderContentAsync(ContentModel.LangName, ContentType.ConstructedLanguage); }else { await UpdateExistingBuilderContentAsync(); } })">
	<DataAnnotationsValidator />
	<ValidationSummary />

	@if (IsEditMode)
	{
		<MudPaper Class="rounded-t-xl" Outlined="true" Width="100%">
			<MudToolBar Dense="false" DisableGutters="false" WrapContent="true" Class="rounded-t-xl flex-center">
				<MudTooltip Text="Saves unsaved content, or updates it, then generates the content based on the parameters given above.">
					<MudButton Variant="Variant.Outlined" Class="rounded-pill" Disabled="@(isLoading || isSavingOrUpdating)" OnClick="@(async () => await GenerateContentAsync())" Size="Size.Large" Color="Color.Success" IconColor="Color.Success" StartIcon="@($"{(isLoading || isSavingOrUpdating ? StaticUtils.AwesomeIcons.FontDict[AwesomeIconType.SparkleWand] : "")}")">
						@(isLoading || isSavingOrUpdating
							  ? "Processing..."
							  : "Generate!")
					</MudButton>
				</MudTooltip>
			</MudToolBar>
		</MudPaper>
	}

	<MudTabs Outlined="true" Rounded="true" Border="true" ApplyEffectsToContainer="true" Class="my-4" PanelClass="pa-4" SliderColor="Color.Primary" KeepPanelsAlive="true">
	<!-- Basic Information -->
	<MudTabPanel Text="Basics" Icon="@Icons.Material.Filled.Details" ToolTip="Basic information about this constructed language.">
		<MudText Typo="Typo.h4" Align="Align.Center">Basics</MudText>
		<MudDivider DividerType="DividerType.Middle" />

		<MudGrid Spacing="2">
			<MudItem xs="12" sm="6">
				<MudTextField @bind-Value="@ContentModel.LangName" For="@(() => ContentModel.LangName)" Label="Language Name" Margin="Margin.Dense" />
			</MudItem>
			<MudItem xs="12" sm="6">
				<MudTextField @bind-Value="@ContentModel.NativePronunciation" For="@(() => ContentModel.NativePronunciation)" Label="Pronunciation" Margin="Margin.Dense" />
			</MudItem>
			<MudItem xs="12">
				<MudTextField @bind-Value="@ContentModel.Description" For="@(() => ContentModel.Description)" Label="Description" Margin="Margin.Dense" Lines="2" />
			</MudItem>
		</MudGrid>
	</MudTabPanel>

	<!-- Phonology -->
	<MudTabPanel Text="Phonology" Icon="@Icons.Material.Filled.Phone" ToolTip="Describes how a language sounds.">

		<MudText Typo="Typo.h4" Align="Align.Center">Phonology</MudText>
		<MudDivider DividerType="DividerType.Middle" />

		<MudGrid Spacing="2">
			<!-- Basic -->
			@if (!ContentModel.Phonology.UseIntermediateWordStructure && !ContentModel.Phonology.UseAdvancedWordStructure)
			{
				<MudItem xs="12">
					<MudText Typo="Typo.h5">Basic Word Structure</MudText>
				</MudItem>
				<MudItem xs="12">
					<MudTextField FullWidth="true" @bind-Value="@ContentModel.Phonology.Consonants" For="@(() => ContentModel.Phonology.Consonants)" Label="Consonants" Variant="Variant.Filled" Lines="2" />
				</MudItem>
				<MudItem xs="12">
					<MudTextField FullWidth="true" @bind-Value="@ContentModel.Phonology.Vowels" For="@(() => ContentModel.Phonology.Vowels)" Label="Vowels" Variant="Variant.Filled" Lines="2" />
				</MudItem>
			}

			<!-- Intermediate -->
			<MudItem xs="12">
				<MudSwitch Size="Size.Large" Color="Color.Primary" @bind-Value="@ContentModel.Phonology.UseIntermediateWordStructure" For="@(() => ContentModel.Phonology.UseIntermediateWordStructure)" Label="Use intermediate word structure?" />
			</MudItem>
			@if (ContentModel.Phonology.UseIntermediateWordStructure && !ContentModel.Phonology.UseAdvancedWordStructure)
			{
				<MudItem xs="12">
					<MudText Typo="Typo.h5">Intermediate Word Structure</MudText>
				</MudItem>
				<MudItem xs="12">
					<MudTextField @bind-Value="@ContentModel.Phonology.InitialConsonants" For="@(() => ContentModel.Phonology.InitialConsonants)" Label="Onset Consonants and Consonant Clusters" FullWidth="true" Variant="Variant.Filled" Lines="2" />
				</MudItem>
				<MudItem xs="12">
					<MudTextField @bind-Value="@ContentModel.Phonology.MedialConsonants" For="@(() => ContentModel.Phonology.MedialConsonants)" Label="Medial Consonants and Consonant Clusters" FullWidth="true" Variant="Variant.Filled" Lines="2" />
				</MudItem>
				<MudItem xs="12">
					<MudTextField @bind-Value="@ContentModel.Phonology.FinalConsonants" For="@(() => ContentModel.Phonology.FinalConsonants)" Label="Word-Final Consonants and Consonant Clusters" FullWidth="true" Variant="Variant.Filled" Lines="2" />
				</MudItem>
				<MudItem xs="12">
					<MudTextField @bind-Value="@ContentModel.Phonology.Vowels" For="@(() => ContentModel.Phonology.Vowels)" Label="Vowels and Diphthongs" FullWidth="true" Variant="Variant.Filled" Lines="2" />
				</MudItem>
				<MudItem xs="@(ContentModel.Phonology.UseVowelHarmony ? 4 : 12)">
					<MudSwitch Color="Color.Primary" @bind-Value="@ContentModel.Phonology.UseVowelHarmony" For="@(() => ContentModel.Phonology.UseVowelHarmony)" Label="Generate with vowel harmony?" />
				</MudItem>
				@if (ContentModel.Phonology.UseVowelHarmony)
				{
					<MudItem xs="8">
						<MudTextField @bind-Value="@ContentModel.Phonology.HarmonicVowels" For="@(() => ContentModel.Phonology.HarmonicVowels)" Label="Harmonic Vowels" FullWidth="true" Variant="Variant.Filled" Lines="2" />
					</MudItem>
				}
			}

			<!-- Advanced -->
			<MudItem xs="12">
				<MudSwitch Size="Size.Large" Color="Color.Primary" @bind-Value="@ContentModel.Phonology.UseAdvancedWordStructure" For="@(() => ContentModel.Phonology.UseAdvancedWordStructure)" Label="Use advanced word structure?" />
			</MudItem>
			@if (ContentModel.Phonology.UseAdvancedWordStructure && !ContentModel.Phonology.UseIntermediateWordStructure)
			{
				<MudItem xs="12">
					<MudText Typo="Typo.h5">Advanced Word Structure</MudText>
				</MudItem>
				<MudItem xs="12">
					<MudTextField @bind-Value="@ContentModel.Phonology.PhonemeClasses" For="@(() => ContentModel.Phonology.PhonemeClasses)" Label="Phoneme Classes" Lines="5" FullWidth="true" Variant="Variant.Filled" />
				</MudItem>
				<MudItem xs="12">
					<MudTextField @bind-Value="@ContentModel.Phonology.WordPatterns" For="@(() => ContentModel.Phonology.WordPatterns)" Label="Word Patterns" Lines="5" FullWidth="true" Variant="Variant.Filled" />
				</MudItem>
				<MudItem xs="12">
					<MudTextField @bind-Value="@ContentModel.Phonology.AffixPatterns" For="@(() => ContentModel.Phonology.AffixPatterns)" Label="Affix Patterns" Lines="5" FullWidth="true" Variant="Variant.Filled" />
				</MudItem>
			}

			<!-- Phoneme Frequency -->
			<MudItem xs="12">
				<MudText Typo="Typo.h5">Frequency Settings</MudText>
			</MudItem>
			<MudItem xs="12">
				<MudField Variant="Variant.Outlined" Label="Phoneme Frequency" FullWidth="true" Margin="Margin.Dense" InnerPadding="true">
					<MudRadioGroup T="PhonemeFrequency" @bind-Value="@ContentModel.Phonology.PhonemeFrequency" For="@(() => ContentModel.Phonology.PhonemeFrequency)">
						@foreach (var freq in Enum.GetValues(typeof(PhonemeFrequency)).Cast<PhonemeFrequency>())
						{
							<MudRadio T="PhonemeFrequency" Value="@freq">@freq.ToDescriptionString()</MudRadio>
						}
					</MudRadioGroup>
				</MudField>
			</MudItem>

			<!-- Illegal Combos -->
			<MudItem xs="12">
				<MudText Typo="Typo.h5">Illegal Combination Options</MudText>
			</MudItem>
			<MudItem xs="12">
				<MudTextField @bind-Value="@ContentModel.Phonology.IllegalCombos" For="@(() => ContentModel.Phonology.IllegalCombos)" Label="Illegal Combinations" Lines="3" FullWidth="true" Margin="Margin.Dense" />
			</MudItem>
			<MudItem xs="12" sm="6">
				<MudSwitch Color="Color.Primary" @bind-Value="@ContentModel.Phonology.BanSameVowelTwiceInARow" For="@(() => ContentModel.Phonology.BanSameVowelTwiceInARow)" Label="Ban same vowel twice in a row?" />
			</MudItem>
			<MudItem xs="12" sm="6">
				<MudSwitch Color="Color.Primary" @bind-Value="@ContentModel.Phonology.BanSameSyllableTwiceInARow" For="@(() => ContentModel.Phonology.BanSameSyllableTwiceInARow)" Label="Ban same syllable twice in a row?" />
			</MudItem>

			<!-- Vowel Probabilities -->
			<MudItem xs="12">
				<MudText Typo="Typo.h5">Vowel Probability Settings</MudText>
			</MudItem>
			<MudItem xs="12">
				<MudSwitch Size="Size.Large" Color="Color.Primary" @bind-Value="@ContentModel.Phonology.UseVowelProbabilities" For="@(() => ContentModel.Phonology.UseVowelProbabilities)" Label="Modify vowel settings?" />
			</MudItem>
			@if (ContentModel.Phonology.UseVowelProbabilities)
			{
				<MudItem xs="12" sm="6">
					<MudNumericField T="float" @bind-Value="@ContentModel.Phonology.VowelAtStartProbability" For="@(() => ContentModel.Phonology.VowelAtStartProbability)" Label="Vowel generates at the start of a word probability" FullWidth="true" Margin="Margin.Dense" Min="0" Max="100" Step="0.25f" />
				</MudItem>
				<MudItem xs="12" sm="6">
					<MudNumericField T="float" @bind-Value="@ContentModel.Phonology.VowelAtEndProbability" For="@(() => ContentModel.Phonology.VowelAtEndProbability)" Label="Vowel generates at the end of a word probability" FullWidth="true" Margin="Margin.Dense" Min="0" Max="100" Step="0.25f" />
				</MudItem>
			}

			<!-- Vowel Tones -->
			<MudItem xs="12">
				<MudText Typo="Typo.h5">Vowel Tone Settings</MudText>
			</MudItem>
			<MudItem xs="12">
				<MudSwitch Size="Size.Large" Color="Color.Primary" @bind-Value="@ContentModel.Phonology.UseVowelTones" For="@(() => ContentModel.Phonology.UseVowelTones)" Label="Use tones?" />
			</MudItem>
			@if (ContentModel.Phonology.UseVowelTones)
			{
				<MudItem xs="12" sm="6">
					<MudTextField @bind-Value="@ContentModel.Phonology.Tones" For="@(() => ContentModel.Phonology.Tones)" Label="Tones" FullWidth="true" Margin="Margin.Dense" />
				</MudItem>
				<MudItem xs="12" sm="6">
					<MudField Variant="Variant.Outlined" Label="Tone Representation" FullWidth="true" Margin="Margin.Dense" InnerPadding="true">
						<MudRadioGroup T="ToneRepresentation" @bind-Value="@ContentModel.Phonology.ToneRepresentation" For="@(() => ContentModel.Phonology.ToneRepresentation)">
							@foreach (var representation in Enum.GetValues(typeof(ToneRepresentation)).Cast<ToneRepresentation>())
							{
								<MudRadio T="ToneRepresentation" Value="@representation">@representation.ToDescriptionString()</MudRadio>
							}
						</MudRadioGroup>
					</MudField>
				</MudItem>
			}

			<!-- Sound Changes -->
			<MudItem xs="12">
				<MudSwitch Size="Size.Large" Color="Color.Primary" @bind-Value="@ContentModel.Phonology.UseSoundChanges" For="@(() => ContentModel.Phonology.UseSoundChanges)" Label="Use sound changes?" />
			</MudItem>
			@if (ContentModel.Phonology.UseSoundChanges)
			{
				<MudItem xs="12" sm="6">
					<MudTextField @bind-Value="@ContentModel.Phonology.SoundChanges" For="@(() => ContentModel.Phonology.SoundChanges)" Label="Sound Changes" FullWidth="true" Margin="Margin.Dense" Lines="8" />
				</MudItem>
				<MudItem xs="12" sm="6">
					<MudStack AlignItems="AlignItems.Start" Justify="Justify.FlexStart">
						<MudSwitch Color="Color.Primary" @bind-Value="@ContentModel.Phonology.ReflectSoundChangeInSpelling" For="@(() => ContentModel.Phonology.ReflectSoundChangeInSpelling)" Label="Reflect sound changes in spelling?" />
						<MudSwitch Color="Color.Primary" @bind-Value="@ContentModel.Phonology.ShowChangesInBrackets" For="@(() => ContentModel.Phonology.ShowChangesInBrackets)" Label="Show sound changes with brackets?" />
						<MudSwitch Color="Color.Primary" @bind-Value="@ContentModel.Phonology.RemoveSlashAroundIPA" For="@(() => ContentModel.Phonology.RemoveSlashAroundIPA)" Label="Remove /slashes/ around the IPA in the output?" />
					</MudStack>
				</MudItem>
			}

			<!-- Stress Patterns -->
			<MudItem xs="12" sm="6" md="4">
				<MudSelect T="StressPattern" @bind-Value="@ContentModel.Phonology.StressPattern" For="@(() => ContentModel.Phonology.StressPattern)" Label="Stress Pattern">
					@foreach (var pattern in Enum.GetValues(typeof(StressPattern)).Cast<StressPattern>())
					{
						<MudSelectItem Value="@pattern">@pattern.ToDescriptionString()</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
			<MudItem xs="12" sm="6" md="4">
				<MudSwitch Color="Color.Primary" @bind-Value="@ContentModel.Phonology.AllowContrastiveStress" For="@(() => ContentModel.Phonology.AllowContrastiveStress)" Label="Allow for contrastive stress patterns?" />
			</MudItem>
			<MudItem xs="12" sm="6" md="4">
				<MudSwitch Color="Color.Primary" @bind-Value="@ContentModel.Phonology.OverrideVocabStress" For="@(() => ContentModel.Phonology.OverrideVocabStress)" Label="Override vocabulary stress?" />
			</MudItem>

		</MudGrid>

	</MudTabPanel>

	<!-- Spelling -->
	<MudTabPanel Text="Spelling" Icon="@Icons.Material.Filled.TextFormat" ToolTip="How the language is written or romanized.">

		<MudText Typo="Typo.h4" Align="Align.Center">Spelling</MudText>
		<MudDivider DividerType="DividerType.Middle" />

		<MudGrid Spacing="2">
			<!-- Spelling Rule Toggles -->
			<MudItem xs="12" sm="6">
				<MudSwitch Size="Size.Large" Color="Color.Primary" @bind-Value="@ContentModel.Spelling.UseSpellingRules" For="@(() => ContentModel.Spelling.UseSpellingRules)" Label="Use spelling rules?" />
			</MudItem>
			<MudItem xs="12" sm="6">
				<MudSwitch Size="Size.Large" Color="Color.Primary" @bind-Value="@ContentModel.Spelling.UseSecondSpelling" For="@(() => ContentModel.Spelling.UseSecondSpelling)" Label="Use second spelling?" />
			</MudItem>

			<!-- Spelling Rules -->
			@if (ContentModel.Spelling.UseSpellingRules)
			{
				var spelling = ContentModel.Spelling;
				<MudItem xs="12">
					<MudText Typo="Typo.h5" Align="Align.Center">Spelling Rules</MudText>
				</MudItem>
				<MudItem xs="12" sm="6" md="9">
					<MudDataGrid Virtualize="true" Outlined="true" Height="250px" T="SpellingRule" Items="@spelling.SpellingRules" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual" Dense="true" Bordered="true" ReadOnly="false" Elevation="0" Hover="true" Striped="true">
						<Columns>
							<PropertyColumn Property="x => x.Order" Title="Ord.">
								<EditTemplate Context="spellingCtx">
									<MudNumericField T="int" @bind-Value="@spellingCtx.Item.Order" Margin="Margin.Dense" Step="1" Label="Order" />
								</EditTemplate>
							</PropertyColumn>
							<PropertyColumn Property="x => x.Predicate" Title="Pred." />
							<PropertyColumn Property="x => x.Replacement" Title="Repl." />
							<PropertyColumn Property="x => x.Environment" Title="Env." />
							<PropertyColumn Property="x => x.Exception" Title="Ex." />
							<TemplateColumn>
								<CellTemplate Context="editCtx">
									<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@editCtx.Actions.StartEditingItemAsync" />
								</CellTemplate>
							</TemplateColumn>
							<TemplateColumn>
								<CellTemplate Context="deleteCtx">
									<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => spelling.SpellingRules.Remove(deleteCtx.Item))" />
								</CellTemplate>
							</TemplateColumn>
						</Columns>
					</MudDataGrid>
				</MudItem>
				<MudItem xs="12" sm="6" md="3">
					<EditForm Model="@_spellingRuleModel" OnSubmit="@HandleSpellingRuleSubmitted">
						<ChildContent Context="spellingRuleModelCtx">
							<MudGrid>
								<MudItem xs="12">
									<MudNumericField T="int" @bind-Value="@_spellingRuleModel.Order" Margin="Margin.Dense" Step="1" Label="Order" />
								</MudItem>
								<MudItem xs="12" sm="6">
									<MudTextField @bind-Value="@_spellingRuleModel.Predicate" Label="Predicate" Margin="Margin.Dense" />
								</MudItem>
								<MudItem xs="12" sm="6">
									<MudTextField @bind-Value="@_spellingRuleModel.Replacement" Label="Replacement" Margin="Margin.Dense" />
								</MudItem>
								<MudItem xs="12" sm="6">
									<MudTextField @bind-Value="@_spellingRuleModel.Environment" Label="In Environment Of" Margin="Margin.Dense" />
								</MudItem>
								<MudItem xs="12" sm="6">
									<MudTextField @bind-Value="@_spellingRuleModel.Exception" Label="Except" Margin="Margin.Dense" />
								</MudItem>
								<MudItem xs="12">
									<MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
										<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" ButtonType="ButtonType.Submit" />
										<MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="@(() => _spellingRuleModel = new SpellingRule { Order = spelling.SpellingRules.Count + 1 })" />
									</MudButtonGroup>
								</MudItem>
							</MudGrid>
						</ChildContent>
					</EditForm>
				</MudItem>
			}

			<!-- Second Spelling Rules -->

			@if (ContentModel.Spelling.UseSecondSpelling)
			{
				var spelling = ContentModel.Spelling;
				<MudItem xs="12">
					<MudText Typo="Typo.h5" Align="Align.Center">SecondSpelling Rules</MudText>
				</MudItem>
				<MudItem xs="12" sm="6" md="3">
					<EditForm Model="@_altSpellingRuleModel" OnSubmit="@HandleAltSpellingRuleSubmitted">
						<ChildContent Context="altSpellingRuleModelCtx">
							<MudGrid>
								<MudItem xs="12">
									<MudNumericField T="int" @bind-Value="@_altSpellingRuleModel.Order" Margin="Margin.Dense" Step="1" Label="Order" />
								</MudItem>
								<MudItem xs="12" sm="6">
									<MudTextField @bind-Value="@_altSpellingRuleModel.Predicate" Label="Predicate" Margin="Margin.Dense" />
								</MudItem>
								<MudItem xs="12" sm="6">
									<MudTextField @bind-Value="@_altSpellingRuleModel.Replacement" Label="Replacement" Margin="Margin.Dense" />
								</MudItem>
								<MudItem xs="12" sm="6">
									<MudTextField @bind-Value="@_altSpellingRuleModel.Environment" Label="In Environment Of" Margin="Margin.Dense" />
								</MudItem>
								<MudItem xs="12" sm="6">
									<MudTextField @bind-Value="@_altSpellingRuleModel.Exception" Label="Except" Margin="Margin.Dense" />
								</MudItem>
								<MudItem xs="12">
									<MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
										<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" ButtonType="ButtonType.Submit" />
										<MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="@(() => _altSpellingRuleModel = new SpellingRule { Order = spelling.SecondSpelling.Count + 1 })" />
									</MudButtonGroup>
								</MudItem>
							</MudGrid>
						</ChildContent>
					</EditForm>
				</MudItem>
				<MudItem xs="12" sm="6" md="9">
					<MudDataGrid Virtualize="true" Outlined="true" Height="250px" T="SpellingRule" Items="@spelling.SecondSpelling" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual" Dense="true" Bordered="true" ReadOnly="false" Elevation="0" Hover="true" Striped="true">
						<Columns>
							<PropertyColumn Property="x => x.Order" Title="Ord.">
								<EditTemplate Context="secondSpellingCtx">
									<MudNumericField T="int" @bind-Value="@secondSpellingCtx.Item.Order" Margin="Margin.Dense" Step="1" Label="Order" />
								</EditTemplate>
							</PropertyColumn>
							<PropertyColumn Property="x => x.Predicate" Title="Pred." />
							<PropertyColumn Property="x => x.Replacement" Title="Repl." />
							<PropertyColumn Property="x => x.Environment" Title="Env." />
							<PropertyColumn Property="x => x.Exception" Title="Ex." />
							<TemplateColumn >
								<CellTemplate Context="editCtx">
									<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@editCtx.Actions.StartEditingItemAsync" />
								</CellTemplate>
							</TemplateColumn>
							<TemplateColumn>
								<CellTemplate Context="deleteCtx">
									<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => spelling.SecondSpelling.Remove(deleteCtx.Item))" />
								</CellTemplate>
							</TemplateColumn>
						</Columns>
					</MudDataGrid>
				</MudItem>
			}

			<MudItem xs="12">
				<MudText Typo="Typo.h5" Align="Align.Center">Language Orthography Settings</MudText>
			</MudItem>

			<MudItem xs="12" sm="6">
				<MudStack>
					<MudCheckBox @bind-Value="@ContentModel.Spelling.MakeSpellingStressSensitive" For="@(() => ContentModel.Spelling.MakeSpellingStressSensitive)" Label="Make spelling sensitive to stress?" />
					<MudCheckBox @bind-Value="@ContentModel.Spelling.ApplyDefaultSpelling" For="@(() => ContentModel.Spelling.ApplyDefaultSpelling)" Label="Apply default spelling rules?" />
					<MudCheckBox @bind-Value="@ContentModel.Spelling.ConvertDiacritics" For="@(() => ContentModel.Spelling.ConvertDiacritics)" Label="Convert diacritics phonemes to single character?" />
					<MudCheckBox @bind-Value="@ContentModel.Spelling.ArrangeJamo" For="@(() => ContentModel.Spelling.ArrangeJamo)" Label="Arrange Korean Jame characters into syllables?" />
					<MudCheckBox @bind-Value="@ContentModel.Spelling.NoSpelling" For="@(() => ContentModel.Spelling.NoSpelling)" Label="Disable spelling (even default)?" />
				</MudStack>
			</MudItem>

			<MudItem xs="12" sm="6">
				<MudStack>
					<MudTextField FullWidth="true" @bind-Value="@ContentModel.Spelling.CustomFontPath" For="@(() => ContentModel.Spelling.CustomFontPath)" Label="Font Path" />
					<MudTextField FullWidth="true" @bind-Value="@ContentModel.Spelling.AlphabetOrder" For="@(() => ContentModel.Spelling.AlphabetOrder)" Label="Custom Alphabet Order" Variant="Variant.Outlined" />
				</MudStack>
			</MudItem>

		</MudGrid>

	</MudTabPanel>

	<!-- Vocabulary -->
	<MudTabPanel Text="Vocabulary" Icon="@($"{StaticUtils.AwesomeIcons.FontDict[AwesomeIconType.Keyboard]}")" ToolTip="Customize language vocabulary.">

		<MudText Typo="Typo.h4" Align="Align.Center">Vocabulary</MudText>
		<MudDivider DividerType="DividerType.Middle" />

		<MudGrid Spacing="2">

			<MudItem xs="12">
				<MudSwitch Size="Size.Large" Color="Color.Primary" @bind-Value="@ContentModel.Vocabulary.AddAndRemoveWords" For="@(() => ContentModel.Vocabulary.AddAndRemoveWords)" Label="Customize Vocabulary" />
			</MudItem>

			@if (ContentModel.Vocabulary.AddAndRemoveWords)
			{
				var vocab = ContentModel.Vocabulary;
				<MudItem xs="12">
					<MudText Typo="Typo.h5" Align="Align.Center">Custom Vocabulary</MudText>
				</MudItem>

				<!-- Custom Vocabulary -->
				<MudItem xs="12" sm="6" md="9">
					<MudDataGrid Virtualize="true" Outlined="true" Height="250px" T="LangWord" Items="@vocab.SavedWords" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual" Dense="true" Bordered="true" ReadOnly="false" Elevation="0" Hover="true" Striped="true">
						<Columns>
							<PropertyColumn Property="x => x.Translations" />
							<PropertyColumn Property="x => x.PartOfSpeech" />
							<PropertyColumn Property="x => x.WordInIPA" />
							<PropertyColumn Property="x => x.SpellingOverride" />
							<TemplateColumn >
								<CellTemplate Context="editCtx">
									<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@editCtx.Actions.StartEditingItemAsync" />
								</CellTemplate>
							</TemplateColumn>
							<TemplateColumn>
								<CellTemplate Context="deleteCtx">
									<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => vocab.SavedWords.Remove(deleteCtx.Item))" />
								</CellTemplate>
							</TemplateColumn>
						</Columns>
					</MudDataGrid>
				</MudItem>

				<MudItem xs="12" sm="6" md="3">
					<EditForm Model="@_wordModel" OnSubmit="@OnVocabSumbitted">
						<ChildContent Context="langWord">
							<MudStack>
								<MudTextField FullWidth="true" @bind-Value="@_wordModel.Translations" Label="Translations" Margin="Margin.Dense" />
								<MudTextField FullWidth="true" @bind-Value="@_wordModel.PartOfSpeech" Label="Part of Speech" Margin="Margin.Dense" MaxLength="10" />
								<MudTextField FullWidth="true" @bind-Value="@_wordModel.WordInIPA" Label="IPA" Margin="Margin.Dense" />
								<MudTextField FullWidth="true" @bind-Value="@_wordModel.SpellingOverride" Label="Irregular Spelling" Margin="Margin.Dense" />
							</MudStack>

							<MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
								<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" ButtonType="ButtonType.Submit" />
								<MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="@(() => _wordModel = new LangWord())" />
							</MudButtonGroup>
						</ChildContent>
					</EditForm>
				</MudItem>

				<!-- Derived Words -->
				@* <MudItem xs="12" sm="6" md="3"> *@
				@* 	<EditForm Model="@_derivedWordModel" OnSubmit="@HandleDerivedWordSubmitted"> *@
				@* 		<ChildContent Context="derivedWord"> *@
				@* 			<MudGrid> *@
				@* 				<MudItem xs="12" sm="6"> *@
				@* 					<MudTextField FullWidth="true" @bind-Value="@_derivedWordModel.Translations" Label="Translations" Margin="Margin.Dense" /> *@
				@* 				</MudItem> *@
				@* 				<MudItem xs="12" xs="6" md="3"> *@
				@* 					<MudTextField FullWidth="true" @bind-Value="@_derivedWordModel.PartOfSpeech" Label="Part of Speech" Margin="Margin.Dense" MaxLength="10" /> *@
				@* 				</MudItem> *@
				@* *@
				@* 			</MudGrid> *@
				@* 			<MudButtonGroup Size="Size.Small" Variant="Variant.Outlined"> *@
				@* 				<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" ButtonType="ButtonType.Submit" /> *@
				@* 				<MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="@(() => _derivedWordModel = new DerivedWord())" /> *@
				@* 			</MudButtonGroup> *@
				@* 		</ChildContent> *@
				@* 	</EditForm> *@
				@* </MudItem> *@
			}

			<MudItem xs="12">
				<MudText Typo="Typo.h5" Align="Align.Center">Vocabulary Settings</MudText>
			</MudItem>

			<MudItem xs="12" sm="6">
				<MudCheckBox Dense="true" @bind-Value="@ContentModel.Vocabulary.UseDefaultDerivations" For="@(() => ContentModel.Vocabulary.UseDefaultDerivations)" Label="Use Default Derivations?" />
			</MudItem>
			<MudItem xs="12" sm="6">
				<MudCheckBox Dense="true" @bind-Value="@ContentModel.Vocabulary.RemoveTranslations" For="@(() => ContentModel.Vocabulary.RemoveTranslations)" Label="Remove Translations?" />
			</MudItem>
			<MudItem xs="12" sm="6">
				<MudCheckBox Dense="true" @bind-Value="@ContentModel.Vocabulary.RemoveDefaults" For="@(() => ContentModel.Vocabulary.RemoveDefaults)" Label="Remove Default Words?" />
			</MudItem>

			<!-- Morphology -->
			<MudItem xs="12">
				<MudText Typo="Typo.h5" Align="Align.Center">Number Morphology</MudText>
			</MudItem>
			<MudItem xs="12" sm="6">
				<MudTextField @bind-Value="@ContentModel.Vocabulary.NumberBase" For="@(() => ContentModel.Vocabulary.NumberBase)" Label="Number Base" FullWidth="true" />
			</MudItem>
			<MudItem xs="12" sm="6">
				<MudCheckBox @bind-Value="@ContentModel.Vocabulary.ListNumbersInOutput" For="@(() => ContentModel.Vocabulary.ListNumbersInOutput)" Label="List Numbers in Output?" />
			</MudItem>
			<MudItem xs="12">
				<MudText Typo="Typo.h5">Morphology</MudText>
			</MudItem>
			<MudItem xs="12" sm="6">
				<MudCheckBox @bind-Value="@ContentModel.Vocabulary.UsePartOfSpeechMorphology" For="@(() => ContentModel.Vocabulary.UsePartOfSpeechMorphology)" Label="Use Part Of Speech Morphology?" />
			</MudItem>
			@if (ContentModel.Vocabulary.UsePartOfSpeechMorphology)
			{
				<MudItem xs="12" sm="6">
					<MudTextField @bind-Value="@ContentModel.Vocabulary.MorphologyRules" For="@(() => ContentModel.Vocabulary.MorphologyRules)" Label="Morphology Rules" FullWidth="true" Lines="5" />
				</MudItem>
			}

		</MudGrid>

	</MudTabPanel>

	<!-- Syntax -->
	<MudTabPanel Text="Syntax" Icon="@($"{StaticUtils.AwesomeIcons.FontDict[AwesomeIconType.Scroll]}")" ToolTip="Rules of the language.">

		<MudText Typo="Typo.h4" Align="Align.Center">Syntax</MudText>
		<MudDivider DividerType="DividerType.Middle" />
		<MudGrid Spacing="2">

			<MudItem xs="12">
				<MudField FullWidth="true" Variant="Variant.Outlined" Label="Word Order">
					<MudRadioGroup T="WordOrderType" @bind-Value="@ContentModel.Syntax.WordOrder" For="@(() => ContentModel.Syntax.WordOrder)">
						@foreach (var orderType in Enum.GetValues(typeof(WordOrderType)).Cast<WordOrderType>())
						{
							<MudRadio T="WordOrderType" Value="@orderType">@orderType.ToDescriptionString()</MudRadio>
						}
					</MudRadioGroup>
				</MudField>
			</MudItem>

			<MudItem xs="12">
				<MudField FullWidth="true" Variant="Variant.Outlined" Label="Adjective Order">
					<MudRadioGroup T="AdjectiveOrderType" @bind-Value="@ContentModel.Syntax.AdjectiveOrder" For="@(() => ContentModel.Syntax.AdjectiveOrder)">
						@foreach (var adjectiveOrderType in Enum.GetValues(typeof(AdjectiveOrderType)).Cast<AdjectiveOrderType>())
						{
							<MudRadio T="AdjectiveOrderType" Value="@adjectiveOrderType">@adjectiveOrderType.ToDescriptionString()</MudRadio>
						}
					</MudRadioGroup>
				</MudField>
			</MudItem>

			<MudItem xs="12">
				<MudField FullWidth="true" Variant="Variant.Outlined" Label="Ad-Position">
					<MudRadioGroup T="AdPositionType" @bind-Value="@ContentModel.Syntax.AdPosition" For="@(() => ContentModel.Syntax.AdPosition)">
						@foreach (var positionType in Enum.GetValues(typeof(AdPositionType)).Cast<AdPositionType>())
						{
							<MudRadio T="AdPositionType" Value="@positionType">@positionType.ToDescriptionString()</MudRadio>
						}
					</MudRadioGroup>
				</MudField>
			</MudItem>

			<MudItem xs="12">
				<MudField FullWidth="true" Variant="Variant.Outlined" Label="Random Affix Type">
					<MudRadioGroup T="RandomAffixType" @bind-Value="@ContentModel.Syntax.AffixType" For="@(() => ContentModel.Syntax.AffixType)">
						@foreach (var affixType in Enum.GetValues(typeof(RandomAffixType)).Cast<RandomAffixType>())
						{
							<MudRadio T="RandomAffixType" Value="@affixType">@affixType.ToDescriptionString()</MudRadio>
						}
					</MudRadioGroup>
				</MudField>
			</MudItem>

			<MudItem xs="12">
				<MudText Typo="Typo.h5" Align="Align.Center">Noun Genders</MudText>
			</MudItem>
			<MudItem xs="12">
				<MudSwitch Size="Size.Large" Color="Color.Primary" @bind-Value="@ContentModel.Syntax.UseNounGender" For="@(() => ContentModel.Syntax.UseNounGender)" Label="Use Noun Genders?" />
			</MudItem>
			@if (ContentModel.Syntax.UseNounGender)
			{
				<MudItem xs="12" sm="4">
					<EditForm Model="@_genderModel" OnSubmit="@HandleNounGenderSubmitted">
						<ChildContent Context="genderModelCtx">
							<MudGrid>
								<MudItem xs="12" sm="7" md="8">
									<MudTextField @bind-Value="@_genderModel.Gender" For="@(() => _genderModel.Gender)" Label="Gender Description" Margin="Margin.Dense" />
								</MudItem>
								<MudItem xs="12" sm="5" md="4">
									<MudTextField @bind-Value="@_genderModel.Abbreviation" For="@(() => _genderModel.Abbreviation)" Label="Abbreviation" Margin="Margin.Dense" />
								</MudItem>
								<MudItem xs="12">
									<MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
										<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" ButtonType="ButtonType.Submit" Title="Submit and add to noun genders." />
										<MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="@(() => _genderModel = new NounGender())" Title="Clear and reset current data." />
									</MudButtonGroup>
								</MudItem>
							</MudGrid>
						</ChildContent>
					</EditForm>
				</MudItem>

				<MudItem xs="12" sm="8">
					<MudDataGrid Virtualize="true" Outlined="true" Height="250px" T="NounGender" Items="@ContentModel.Syntax.NounGenders" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual" Dense="true" Bordered="true" ReadOnly="false" Elevation="0" Hover="true" Striped="true">
						<Columns>
							<PropertyColumn Property="x => x.Gender" Title="Gender" />
							<PropertyColumn Property="x => x.Abbreviation" Title="Abbreviation" />
							<TemplateColumn >
								<CellTemplate Context="editCtx">
									<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@editCtx.Actions.StartEditingItemAsync" />
								</CellTemplate>
							</TemplateColumn>
							<TemplateColumn>
								<CellTemplate Context="deleteCtx">
									<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => ContentModel.Syntax.NounGenders.Remove(deleteCtx.Item))" />
								</CellTemplate>
							</TemplateColumn>
						</Columns>
					</MudDataGrid>
				</MudItem>
			}

		</MudGrid>

	</MudTabPanel>

	</MudTabs>
	<MudPaper Class="rounded-b-xl" Outlined="true" Width="100%">
		<MudToolBar Dense="false" DisableGutters="false" WrapContent="true" Class="rounded-t-xl">
			<MudTooltip Text="Download language data as XML.">
				<MudButton Disabled="true" Size="Size.Large" IconColor="Color.Secondary" StartIcon="@Icons.Material.Filled.Download">Download</MudButton>
			</MudTooltip>
			<MudTooltip Text="Generates content and creates an article in your world based off the generated content.">
				<MudButton Disabled="@(!IsEditMode)" Size="Size.Large" IconColor="Color.Warning" StartIcon="@($"{StaticUtils.AwesomeIcons.FontDict[AwesomeIconType.Scroll]}")">Publish</MudButton>
			</MudTooltip>
			<MudSpacer />
			<MudTooltip Text="Saves your data to the database.">
				<MudSwitch @bind-Value="@showResults" Size="Size.Large" ThumbIcon="@(showResults ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)">@($"{(showResults ? "Results are shown" : "Results are hidden")}")</MudSwitch>
			</MudTooltip>
			<MudSpacer />
			<MudTooltip Text="Saves your data to the database.">
				<MudButton Class="mr-5" Size="Size.Large" IconColor="Color.Primary" ButtonType="ButtonType.Submit" StartIcon="@($"{StaticUtils.AwesomeIcons.FontDict[AwesomeIconType.FloppyDisk]}")">Save</MudButton>
			</MudTooltip>
		</MudToolBar>
	</MudPaper>
	</EditForm>
}

@if (showResults)
{
	<ConLangResults GeneratedResult="@ResultModel" Generating="@(isLoading || isSavingOrUpdating)" />
}