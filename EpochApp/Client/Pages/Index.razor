@page "/"
@using EpochApp.Client.Services

<PageTitle>Index</PageTitle>

<h3>Browser Storage Test</h3>
<form>
    <label>
        Key
        <input type="text" @bind-value="@Key" />
    </label>
    <label>
        Value
        <input type="text" @bind-value="@Value" />
    </label>
    <MudButton OnClick="@(async () => await SetValueAsync())">Set Value</MudButton>
</form>
<div>Stored Value: @StoredValue</div>

<EpochContainer Flex="FlexType.Center" Width="ContainerWidthType.Md">
    <button class="button" @onclick="@(async () => await GetValueAsync())">Get Value</button>
    <button class="button" @onclick="@(async () => await RemoveAsync())">Remove Value</button>
    <button class="button" @onclick="@(async () => await ClearAllAsync())">Clear Value</button>
</EpochContainer>
<br />
<article class="card" style="max-width: 320px">
    <header class="card-header">
        <div class="card-badges">
            <a href="#" class="badge style-green">Sundays</a>
            <a href="#" class="badge style-accent">Cards</a>
        </div>

        <img class="card-image" src="https://picsum.photos/200/300" alt="Card image" />
        <h2 class="card-title">Hello, I am a new card</h2>
    </header>

    <div class="card-body">
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada
        erat ut turpis.
    </div>

    <footer class="card-footer">
        <div class="button-group">
            <button class="button bordered style-light-light" aria-label="Like">
                <!-- Like svg ... -->
            </button>
            <button class="button bordered style-light-light" aria-label="Share">
                <!-- Share svg ... -->
            </button>
        </div>

        <a href="#" class="button style-accent push-right">Read more</a>
    </footer>
</article>

@code {
    [Inject] public ILocalStorage Storage { get; set; }
    public string Key { get; set; } = "";
    public string Value { get; set; } = "";
    public string StoredValue { get; set; } = "";

    public async Task SetValueAsync()
    {
        await Storage.SetValueAsync(Key, Value);
    }

    public async Task GetValueAsync()
    {
        StoredValue = await Storage.GetValueAsync<string>(Key);
    }

    public async Task RemoveAsync()
    {
        await Storage.RemoveAsync(Key);
    }

    public async Task ClearAllAsync()
    {
        await Storage.Clear();
        StoredValue = "";
    }
}