@page "/Auth/Register"
@using EpochApp.Client.Services
@using EpochApp.Shared
<PageTitle>Registration</PageTitle>
<MudText Typo="Typo.h1">Create an Account</MudText>

<EditForm Model="@_registration" OnValidSubmit="@(async () => await AttemptRegistrationAsync())">
    <DataAnnotationsValidator />
    <MudTextField Label="User Name" @bind-Value="@_registration.UserName"/>
    <MudTextField Label="Email" @bind-Value="@_registration.Email"/>
    <MudTextField InputType="InputType.Password" Label="Password" @bind-Value="@_registration.Password"/>
    <MudTextField InputType="InputType.Password" Label="Confirm Password" @bind-Value="@_registration.Password2"/>
    <MudDatePicker T="DateTime?" Label="Date of Birth" @bind-Date="@_registration.DateOfBirth"/>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Register</MudButton>
</EditForm>

@code {
    [Inject]
    public HttpClient Http { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public ILogger<Registration> Logger { get; set; }
    [Inject]
    public EpochAuthProvider Auth { get; set; }
    private RegistrationDTO _registration = new RegistrationDTO();

    private async Task AttemptRegistrationAsync()
    {
        Logger.LogInformation("Attempting to register user: \n\t",
                              _registration.UserName, "\n\t\t",
                              _registration.Password, "\n\t\t",
                              _registration.DateOfBirth, "\n\t\t"
                                  , _registration.Email, "\n\t\t");
        var result = await Http.PostAsJsonAsync("api/v1/EpochUsers/Registration", _registration);
        if (result.IsSuccessStatusCode)
        {
            await Auth.LoginAsync(_registration.UserName, _registration.Password);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Dictionary<string, List<string>> errors = await result.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
            foreach (var error in errors)
            {
                Logger.LogError($"Error registering user: {error.Key}\n\t", error.Value, "\n");
            }
        }
    }

}